@page "/"
@using MediatR
@using ReservationGanttChartGenerator.Application.Common.File.Queries
@using ReservationGanttChartGenerator.Application.Common.Generation.Commands
@using ReservationGanttChartGenerator.Domain.Models
@using SixLabors.ImageSharp.Formats.Png
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject ISender _mediator

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            @if (!loaded) {
                <p><em>Loading...</em></p>
            }
            else {

                @if (_files.Count == 0) {
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload Files</MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                }
                else {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Generate">Generate</MudButton>
                }
            }
        </MudPaper>
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudImage Src="@dataUri"></MudImage>
        </MudPaper>
    </MudItem>
</MudGrid>

@if (_files != null) {
    <MudText Typo="@Typo.h6">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>
    <MudList T="string">
        @foreach (var file in _files) {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code {
    bool loaded = false;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    Stream? _stream;
    List<Reservation>? _reservations;
    string dataUri = string.Empty;

    string? imagePath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _stream = null;

        await Task.Delay(Globals.DefaultDelay);

        loaded = true;
    }

    private async Task UploadFile(IBrowserFile file)
    {
        // var buffer = new Byte[file.Size];
        _files.Add(file);
        _stream = file.OpenReadStream();
    }
    private async Task Generate()
    {
        _reservations = await _mediator.Send(new ReadFileQuery(_stream));
        using var stream = new MemoryStream();
        var image = await _mediator.Send(new GenerateImageCommand(_reservations));
        image.Save(stream, new PngEncoder());
        byte[] imageBytes = stream.ToArray();

        string base64Image = Convert.ToBase64String(imageBytes);
        dataUri = $"data:image/png;base64,{base64Image}";
        StateHasChanged();

    }

}