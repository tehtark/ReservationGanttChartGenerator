@page "/"
@using MediatR
@using ReservationGanttChartGenerator.Application.Common.File.Queries
@using ReservationGanttChartGenerator.Application.Common.Generation.Commands
@using ReservationGanttChartGenerator.Domain.Models
@using ReservationGanttChartGenerator

@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ISender _mediator
@inject NavigationManager _navigationManager

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            @if (_loaded && _files.Count == 0) {
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload Files</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            }
            else if (_loaded && !_generated) {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Generate">Generate</MudButton>
            }
            else if (_loaded && _generated) {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Clear">Clear</MudButton>
            }
            else {
                <MudProgressCircular Color="Color.Success" Indeterminate="true" />
            }
        </MudPaper>
    </MudItem>
    @if (!string.IsNullOrEmpty(dataUri)) {
        <MudItem xs="12">

            <MudImage Src="@dataUri" Style="width: 100%; height: auto;"></MudImage>

        </MudItem>
    }
</MudGrid>

@code {
    bool _loaded = false;
    bool _generated = false;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    Stream? _stream;
    string dataUri = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _stream = null;

        await Task.Delay(Globals.DefaultDelay);

        _loaded = true;

        StateHasChanged();
    }

    private async Task UploadFile(IBrowserFile file)
    {
        _files.Add(file);
        _stream = file.OpenReadStream();
        StateHasChanged();
    }
    private async Task Generate()
    {
        _generated = true;

        if (_stream == null) {
            return;
        }

        var _reservations = await _mediator.Send(new ReadFileQuery(_stream));

        if (_reservations == null) {
            return;
        }

        var image = await _mediator.Send(new GenerateImageCommand(_reservations));
        dataUri = await _mediator.Send(new ConvertImageToStringCommand(image));
        StateHasChanged();
    }

    private async Task Clear()
    {
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

}